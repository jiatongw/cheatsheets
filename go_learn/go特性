1. 垃圾回收 garbage collection
	a. 内存自动回收，不需要开发人员管理内存
	b. 只需要new 分配内存，不需要释放

2. 天然并发
	a. 从语言层面支持并发
	b. goroute， 轻量级线程，创建成千上万个goroute成为可能
	c. 基于CSP(Communicating Sequential Process)

3. channel
	a. 管道，类似ubix/linux中的pipe
	b. 多个goroute之间通过channel进行通信
	c. 支持任何类型
		func main() {
			pipe := make(chan int, 3) (如果超过容量，不会溢出(样的话会造成数据丢失)，而是阻塞)
			pipe <- 1
			pipe <- 2
		}
		channel是先进先出的队列

4. 多返回值
	a. 一个函数多返回值


包的概念 (go中所有的编码都是utf-8)

1. 和python一样，把相同功能的代码放到一个目录，称之为包
2. 包可以被其他包引用
3. main包是用来生成可执行文件，每个程序只有一个main包
4. 包的主要用途是提高代码的可复用性

值类型和引用类型
1. 值类型：变量直接存储值，内存通常在栈中分配。值类型有：int, float等基本数据类型，数组array，和struct
2. 引用类型：变量存储的是一个地址，这个地址存储最终的值。内存通常在堆上分配。通过GC回收。引用类型有pointer, slice, map, chan, interface等

函数
1.go语言中函数不支持重载
2.函数也可以赋值给变量
	func foo(){}
	a := foo
	fmt.Println(a) 打印出来的是函数的地址
3.匿名函数
4.多返回值
5.可变参数
	func add(arg ...int) int {} 0个或多个参数
	func add(a int, arg ...int) int {} 1个或多个参数
	其中arg是一个slice， 我们可以通过arg[index]依次访问所有参数
	通过len(arg)来判断传递参数的个数
6.defer用途
	1.关闭文件句柄
		func read() {
			file := open(filename)
			defer file.close()
			//文件操作
		}
	2.锁资源释放
		func read() {
			mc.Lock()
			defer mc.Unlock()
			//其他操作
		}
	3.数据库链接释放
		func read() {
			conn := openDatabase()
			defer conn.Close()
			//其他操作
		}
	