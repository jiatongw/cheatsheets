1. 垃圾回收 garbage collection
	a. 内存自动回收，不需要开发人员管理内存
	b. 只需要new 分配内存，不需要释放

2. 天然并发
	a. 从语言层面支持并发
	b. goroute， 轻量级线程，创建成千上万个goroute成为可能
	c. 基于CSP(Communicating Sequential Process)

3. channel
	a. 管道，类似ubix/linux中的pipe
	b. 多个goroute之间通过channel进行通信
	c. 支持任何类型
		func main() {
			pipe := make(chan int, 3) (如果超过容量，不会溢出(样的话会造成数据丢失)，而是阻塞)
			pipe <- 1
			pipe <- 2
		}
		channel是先进先出的队列

4. 多返回值
	a. 一个函数多返回值


包的概念 (go中所有的编码都是utf-8)

1. 和python一样，把相同功能的代码放到一个目录，称之为包
2. 包可以被其他包引用
3. main包是用来生成可执行文件，每个程序只有一个main包
4. 包的主要用途是提高代码的可复用性

值类型和引用类型
1. 值类型：变量直接存储值，内存通常在栈中分配。值类型有：int, float等基本数据类型，数组array，和struct
2. 引用类型：变量存储的是一个地址，这个地址存储最终的值。内存通常在堆上分配。通过GC回收。引用类型有pointer, slice, map, chan, interface等

函数
1.go语言中函数不支持重载
2.函数也可以赋值给变量
	func foo(){}
	a := foo
	fmt.Println(a) 打印出来的是函数的地址
3.匿名函数
4.多返回值
5.可变参数
	func add(arg ...int) int {} 0个或多个参数
	func add(a int, arg ...int) int {} 1个或多个参数
	其中arg是一个slice， 我们可以通过arg[index]依次访问所有参数
	通过len(arg)来判断传递参数的个数
6.defer用途
	1.关闭文件句柄
		func read() {
			file := open(filename)
			defer file.close()
			//文件操作
		}
	2.锁资源释放
		func read() {
			mc.Lock()
			defer mc.Unlock()
			//其他操作
		}
	3.数据库链接释放
		func read() {
			conn := openDatabase()
			defer conn.Close()
			//其他操作
		}
7.闭包(详见Day4视频)

8.数组
	1.长度是数组的一部分
		var a [5]int 和 var a [10]int 是不同类型 
	2.数组是值类型，因此改变副本的值，不会改变本身的值
9.切片
	切片拷贝
	s1 := []int{1,2,3,4,5}
	s2 := make([]int, 10)
	copy(s2, s1)
	s3 := []int{1,2,3}
	s3 = append(s3, s2...)
	s3 = append(s3, 4, 5, 6)

	string底层就是一个byte的数组，因此string也可以进行切片操作
	str := "hello world"
	s1 := str[0:5]

包
1.线程同步
	1.import("sync")
	2.互斥锁, var mu sunc.Mutex
	3.读写锁, var mu sync.RWMutex

Sturct
1.结构体定义的三种形式
	比如有一个 type Student struct{}
	1.var stu Student
	2.var stu *Student = new(Student)
	3.var stu *Student = &Student{}
2.结构体的内存布局，结构体中所有字段在内存中是连续的
3.结构体中每个字段可以有一个tag.这个tag可以通过反射的机制获取到,最常用的场景就是json序列化和反序列化
	type struct student {
		Name string `this is name field`
		Age int 	`this is age field`
	}
4.结构体中字段可以没有名字，即匿名字段
	type struct student {
			Name string 
			int
		}

方法
1.Golang中的方法是作用在特定类型的变量上，因此自定义类型，都可以有方法，而不仅仅是struct
func (receiver type) methodName(arg) (return values) {}
2.组合(composite)和匿名字段
	如果一个struct嵌套了另一个匿名结构体，那么这个结构体可以直接访问匿名结构体的方法，从而实现了继承
	如果一个struct嵌套了另一个有名结构体，那么这个模式就叫组合

接口
1.interface类型可以定义一组方法，但是这些不需要实现，并且interface不能包含任何变量
2.接口实现
	1.go语言中的接口，不需要显示的实现，只要一个变量，含有接口类型中的所有方法，
	  那么这个变量就实现这个接口。因此，没有implement类似的关键字
	2.如果一个变量含有多个interface类型的方法，那么这个变量就实现了多个接口
3.多态
	一种事物的多种形态，都可以按照统一的接口进行操作
4.空接口
	空接口没有任何方法，所以所有类型都实现了空接口

反射
1.反射可以在运行时动态获取变量的相关信息
	import ("reflect")
	两个函数：
		1.reflect.TypeOf, 获取变量的类型, 返回reflect.Type类型
		2.reflect.ValueOf, 获取变量的类型, 返回reflect.Value类型
		3.reflect.Value.Kind, 获取变量的类别, 返回一个常量
		4.reflect.Value.Interface(), 转换成interface{}类型

终端读写
os.Stdin: 标准输入
os.Stdout: 标准输出
os.Stderr: 标准错误输出

文件读写
1.os.File 封装所有文件相关操作，os.Stdin，os.Stdout，os.Stderr 都是 *os.File
2.文件写入
	os.OpenFIle()
3.拷贝文件
	io.Copy(dst, src)

命令行参数
1.os.Args 是一个string的切片，用来存储所有的命令行参数
2.flag包的使用，用来解析命令行参数
	flag.BoolVar(&test, "b", false, "print on newline")
	flag.StringVar()
	flag.IntVar()
